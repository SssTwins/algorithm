package pers.shb.exercise.array.medium;

/**
 * 加油站
 * 在一条环路上有'N'个加油站，其中第'i'个加油站有汽油'gas[i]'升。
 * <p>
 * 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1'个加油站需要消耗汽油'cost[i]'升。你从其中的一个加油站出发，开始时油箱为空。
 * <p>
 * 如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。
 * <p>
 * 说明:'
 * <p>
 * 如果题目有解，该答案即为唯一答案。
 * 输入数组均为非空数组，且长度相同。
 * 输入数组中的元素均为非负数。
 * 示例'1:
 * <p>
 * 输入:
 * gas  = [1,2,3,4,5]
 * cost = [3,4,5,1,2]
 * <p>
 * 输出: 3
 * <p>
 * 解释:
 * 从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
 * 开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
 * 开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
 * 开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
 * 开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
 * 开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
 * 因此，3 可为起始索引。
 * 示例 2:
 * <p>
 * 输入:
 * gas  = [2,3,4]
 * cost = [3,4,3]
 * <p>
 * 输出: -1
 * <p>
 * 解释:
 * 你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
 * 我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
 * 开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
 * 开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
 * 你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
 * 因此，无论怎样，你都不可能绕环路行驶一周。
 *
 * @author SHB
 * @date 2020年11月18日 19:07:30
 */
public class GasStation {
    
    /**
     * 计算加油站起始点
     * 推导能够得出结论：若x不能达到y,则从 x,y 之间的任何一个加油站出发，都无法到达加油站 y 的下一个加油站。
     * 我们首先检查第 0 个加油站，并试图判断能否环绕一周；如果不能，就从第一个无法到达的加油站开始继续检查
     *
     * @param gas  加油站数组
     * @param cost 加油站间隔耗油数组
     * @return 加油站索引
     */
    public static int canCompleteCircuit(int[] gas, int[] cost) {
        int len = gas.length;
        int i = 0;
        // 只遍历一遍加油站数组
        while (i < len) {
            int cur = 0;
            int gasSum = 0, costSum = 0;
            while (cur < len) {
                int j = (i + cur) % len;
                gasSum += gas[j];
                costSum += cost[j];
                if (gasSum < costSum) {
                    break;
                }
                cur++;
            }
            // 若当前数为加油站数组长度，则说明能环游一周
            // 否则从第一个无法达到的加油站计算
            if (cur == len) {
                return i;
            } else {
                i = i + cur + 1;
            }
        }
        return -1;
    }
}
